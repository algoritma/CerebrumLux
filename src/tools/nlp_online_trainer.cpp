#include <iostream>
#include <string>
#include "communication/natural_language_processor.h"
#include "core/logger.h"

int main() {
    // Initialize logger
    Logger::get_instance().init(LogLevel::INFO);

    // Use the default constructor for NLP
    NaturalLanguageProcessor nlp;

    std::cout << "ðŸ”¹ NLP Online Trainer baÅŸlatÄ±ldÄ±." << std::endl;

    try {
        nlp.load_model("data/models/nlp_model.dat");
        LOG_DEFAULT(LogLevel::INFO, "Model baÅŸarÄ±yla yÃ¼klendi.");
    } catch (...) {
        LOG_DEFAULT(LogLevel::WARNING, "Model bulunamadÄ±, yeni model oluÅŸturulacak.");
    }

    std::string input, expected;
    while (true) {
        std::cout << "\nCÃ¼mle girin (veya 'exit' ile Ã§Ä±k): ";
        std::getline(std::cin, input);
        if (input == "exit") break;

        std::cout << "Beklenen intent girin: ";
        std::getline(std::cin, expected);
        if (expected.empty()) {
            LOG_DEFAULT(LogLevel::WARNING, "BoÅŸ intent girildi, atlanÄ±yor.");
            continue;
        }

        // ðŸ”¹ Incremental training
        nlp.trainIncremental(input, expected);
        LOG_DEFAULT(LogLevel::INFO, "Incremental training tamamlandÄ±.");

        std::string predicted = nlp.predict_intent(input);
        std::cout << "ðŸ“Œ Tahmin edilen intent: " << predicted << std::endl;

        nlp.save_model("data/models/nlp_model.dat");
        LOG_DEFAULT(LogLevel::INFO, "Model kaydedildi.");
    }

    std::cout << "âœ… EÄŸitim oturumu sona erdi." << std::endl;
    return 0;
}
